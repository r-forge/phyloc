library(Rdbi)#
conn <- dbConnect(PgSQL(), dbname="adhoc", host="129.31.3.19", password="b1g_b1rd")#
#
subSppRich <-  dbGetQuery(conn, "#
select grid_id, sum(n_subspecies)#
		from geodb.species join geodb.locations using (species_id)#
		where species_id < 90000 and presence_id in (1,2,12) and origin_id in (1,2)#
		and grid_id in (select grid_id from behr_grid where land_area > 0)")
library(RdbiPgSQL)#
conn <- dbConnect(PgSQL(), dbname="adhoc", host="129.31.3.19", password="b1g_b1rd")
library(Rdbi)
library(Rdbi)#
library(RdbiPgSQL)#
#
conn <- dbConnect(PgSQL(), dbname="adhoc", host="129.31.3.19", password="b1g_b1rd", user="dorme")#
#
resolutions <- c(1,2,4,8)#
taxa <- c("avian", "mammal", "amphibian")#
diversity.types <- c("total", "threat", "rsq1")#
corr.comb <- c("avian mammal","avian amphibian", "mammal amphibian")#
#
corr.store <- array(dim=c(4,3,3), dimnames=list(resolutions, diversity.types, corr.comb))#
#
# original grid...#
#
# get the richnesses and land and realm data.#
#
dat <- dbGetQuery(conn, "select grid_id, row, col, land_area, #
                            total_richness as avian_total,#
                            threat_richness as avian_threat,#
                            rsq1_richness as avian_rsq1, #
                            mammal_total_richness as mammal_total,#
                            mammal_threat_richness as mammal_threat,#
                            mammal_rsq1_richness as mammal_rsq1,#
                            amphibian_total_richness as amphibian_total,#
                            amphibian_threat_richness as amphibian_threat,#
                            amphibian_rsq1_richness as amphibian_rsq1                            #
                        from behr_grid#
                        order by grid_id asc;")#
#
#
# look at the distributions#
# make sure no sea cells and lose the zero values...#
rich.table <- subset(dat[,5:13], dat$land_area > 0)#
#
rich.table <- as.data.frame(apply(rich.table, 2, #
                    function(x) ifelse(x > 0, x, NA)))#
                    #
# global and realm correlations#
#
for(div in diversity.types){#
    for(comb in corr.comb){#
    #
        # which two taxa are we dealing with#
        tx <- strsplit(comb, split=" ")[[1]]#
        #
       # get the correct subset - where does either group occur on land in the right realm?#
        tx1.present <- with(dat, eval(parse(text = paste(tx[1], "_", div, " > 0", sep=""))))#
        tx2.present <- with(dat, eval(parse(text = paste(tx[2], "_", div, " > 0", sep=""))))#
        land <- with(dat, land_area > 0)#
#
        subs <- (tx1.present | tx2.present) & land#
#
        curr.corr <- paste("cor.test(~ ",tx[1],"_", div, " + ",tx[2],#
                             "_", div, ",data=dat, subset=subs)", sep="")#
        corr.store[1, div, comb] <- eval(parse(text=curr.corr))$estimate#
    }#
}
corr.store
resolutions <- c(2,4,8)#
for(ind in seq(along=res)){#
    #
    res <- resolutions[ind]#
     query <- paste("select grid",res,"_id, row, col,#
                      total_richness as avian_total,#
                      avian_threat_richness as avian_threat,#
                      avian_endemic_richness as avian_rsq1, #
                      mammal_total_richness as mammal_total,#
                      mammal_threat_richness as mammal_threat,#
                      mammal_rsq1_richness as mammal_rsq1,#
                      amphibian_total_richness as amphibian_total,#
                      amphibian_threat_richness as amphibian_threat,#
                      amphibian_rsq1_richness as amphibian_rsq1                            #
                  from behr_grid",res,"#
                  order by grid",res,"_id asc;", sep="")#
#
dat <- dbGetQuery(conn, query)#
                        #
# look at the distributions without zero values#
rich.table <- as.data.frame(apply(dat, 2, #
                    function(x) ifelse(x > 0, x, NA)))#
#
# global  correlations#
#
for(div in diversity.types){#
    for(comb in corr.comb){#
        #
            # which two taxa are we dealing with#
            tx <- strsplit(comb, split=" ")[[1]]#
            #
           # get the correct subset - where does either group occur#
            tx1.present <- with(dat, eval(parse(text = paste(tx[1], "_", div, " > 0", sep=""))))#
            tx2.present <- with(dat, eval(parse(text = paste(tx[2], "_", div, " > 0", sep=""))))#
            subs <- (tx1.present | tx2.present)#
#
            curr.corr <- paste("cor.test(~ ",tx[1],"_", div, " + ",tx[2],#
                                 "_", div, ",data=dat, subset=subs)", sep="")#
            corr.store[ind+1, div, comb] <- eval(parse(text=curr.corr))$estimate#
    }#
}#
#
#
#
}
resolutions <- c(2,4,8)#
for(ind in seq(along=resolutions)){#
    #
    res <- resolutions[ind]#
     query <- paste("select grid",res,"_id, row, col,#
                      total_richness as avian_total,#
                      avian_threat_richness as avian_threat,#
                      avian_endemic_richness as avian_rsq1, #
                      mammal_total_richness as mammal_total,#
                      mammal_threat_richness as mammal_threat,#
                      mammal_rsq1_richness as mammal_rsq1,#
                      amphibian_total_richness as amphibian_total,#
                      amphibian_threat_richness as amphibian_threat,#
                      amphibian_rsq1_richness as amphibian_rsq1                            #
                  from behr_grid",res,"#
                  order by grid",res,"_id asc;", sep="")#
#
    dat <- dbGetQuery(conn, query)#
                        #
    # look at the distributions without zero values#
    rich.table <- as.data.frame(apply(dat, 2, #
                        function(x) ifelse(x > 0, x, NA)))#
#
    # global  correlations#
#
    for(div in diversity.types){#
        for(comb in corr.comb){#
        #
                # which two taxa are we dealing with#
                tx <- strsplit(comb, split=" ")[[1]]#
            #
               # get the correct subset - where does either group occur#
                tx1.present <- with(dat, eval(parse(text = paste(tx[1], "_", div, " > 0", sep=""))))#
                tx2.present <- with(dat, eval(parse(text = paste(tx[2], "_", div, " > 0", sep=""))))#
                subs <- (tx1.present | tx2.present)#
#
                curr.corr <- paste("cor.test(~ ",tx[1],"_", div, " + ",tx[2],#
                                     "_", div, ",data=dat, subset=subs)", sep="")#
                corr.store[ind+1, div, comb] <- eval(parse(text=curr.corr))$estimate#
        }#
    }#
}
corr.store
library(CAIC)
data(BigTree)
mod <- caic(yv ~ xv1 * xv2, data=BigTreeDat, phy=BigTree)
mod <- caic(yv ~ xv1 * xv2, data=BigTreeDat, phy=BigTree, names.col=tip)
mod <- caic(yv ~ xv1 * xv2, data=BigTreeDat, phy=BigTree, names.col=tips)
str(BigTreeDat)
mod <- caic(yv ~ xv1 * xv2, data=BigTreeDat, phy=BigTree, names.col=species)
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree, names.col=species)
traceback()
debug(caic.table)
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree, names.col=species)
n
str(tab)
sum(tab$validNodes)
length(rstudent(caicObj$mod))
rstudent(caicObj$mod)
        stRes <- rstudent(caicObj$mod)#
        tab$studResid[as.numeric(match(names(stRes)), tab$nodeNumber)] <- stRes
        stRes <- rstudent(caicObj$mod)#
        tab$studResid[as.numeric(match(names(stRes)), tab$nodeNumber)] <- stRes
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree, names.col=species)
n
        stRes <- rstudent(caicObj$mod)
tab$studResid[match(as.numeric(names(stRes)), tab$nodeNumber)]
        tab$studResid[match(as.numeric(names(stRes)), tab$nodeNumber)] <- stRes
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree, names.col=species)
n
tab$studResid[match(as.numeric(names(stRes)), tab$nodeNumber)] <-1
stRes <- rstudent(caicObj$mod)
tab$studResid[match(as.numeric(names(stRes)), tab$nodeNumber)] <-1
tab
        tab$studResid[match(as.numeric(names(stRes)), tab$nodeNumber)] <- stRes
setwd("Scripts/CAIC/CAIC/")
source("R/caic.diagnostics.R")
source("R/caic.table.R")
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree, names.col=species)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01)
debug(caic.diagnostics)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01)
str(tab)
Q
source("R/caic.diagnostics.R")
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01)
source("R/caic.table.R")
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree, names.col=species)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01)
plot(BigTree)
is.ultrametric(BigTree)
is.ultrametric(BigTree, tol=0.01)
is.ultrametric(BigTree, tol=0.1)
is.ultrametric(BigTree, tol=1)
dev.off()
plot(BigTree)
plot(BigTree, show=FALSE)
plot(BigTree, show.tip=FALSE)
tmp <- branching.times(BigTree)
tmp
str(bigTree)
str(BigTree)
help.search("ultrametric")
source("R/caic.diagnostics.R")
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01)
source("R/caic.diagnostics.R")
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01, cex=1.2)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01, cex=1.5)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01, cex=1.5, cex.axis=1.2)
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=0.01, cex=1.5, cex.axis=1.2, cex.lab=1.4)
modDiag
#
data(BigTree)#
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree)#
#
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=1)#
print(modDiag)
#
data(BigTree)#
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree)#
#
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=2)#
print(modDiag)
source("R/caic.diagnostics.R")
source("R/caic.diagnostics.R")
#
data(BigTree)#
mod <- caic(yv ~ xc1 * xc2, data=BigTreeDat, phy=BigTree)#
#
par(mfrow=c(3,3))#
modDiag <- caic.diagnostics(mod, ask=FALSE, ultrametric.tol=1)#
print(modDiag)
dev.off()
plot(BigTree, show.tip=FALSE)
tmp <- clade.matrix(BigTree)
str(tmp)
rowSums(tmp$clade.matrix)
colSums(tmp$clade.matrix)
apply(tmp$clade.matrix,2, function(X)sum(tmp$edge.length[X])
)
?root.to.tip
x <- apply(tmp$clade.matrix,2, function(X)sum(tmp$edge.length[X]))
hist(x)
x <- rcoal(10)
xcm <- clade.matrix(x)
xcm
plot(x)
apply(x$clade.matrix,2, function(X)sum(x$edge.length[X])))
apply(x$clade.matrix,2, function(X)sum(x$edge.length[X]))
apply(xcm$clade.matrix,2, function(X)sum(xcm$edge.length[X]))
apply(xcm$clade.matrix,2, function(X)print(xcm$edge.length[X]))
apply(xcm$clade.matrix,2, function(X)sum(xcm$edge.length[X == 1]))
x <- apply(tmp$clade.matrix,2, function(X)sum(tmp$edge.length[X==1]))
hist(x)
x
max(x)
shortfall <- max(x) - x
shortfall
BigTree$edge.length
BigTree$edge[,2]
BigTree$edge.length[BigTree$edge[,2] %in% 1:200]
tipMatch <- match(1:200, BigTree$edge[,2])
tipMatch
BigTree$edge.length[tipMatch] <- BigTree$edge.length+shortfall
BigTree$edge.length[tipMatch] <- BigTree$edge.length[tipMatch]+shortfall
plot(BigTree)
data(BigTree)
plot(BigTree)
plot(BigTree, cex=0.2, label=10)
plot(BigTree, cex=0.2, label=5)
plot(BigTree, cex=0.7, label=5)
table(shortfall)
BigTree$edge.length[tipMatch] <- BigTree$edge.length[tipMatch]+shortfall
plot(BigTree, cex=0.7, label=5)
is.ultrametic(BigTree)
is.ultrametric(BigTree)
save(BigTree, BigTreeDat, file="data/BigTree.rda")
#
data(SmallTree)#
caicMod <- macrocaic(nSpp ~ weight, phy=diTree, data=SmallTreeDat, names.col=tip)
caic.diagnostics(caicMod)
summary(caicMod)
summary(mod)
source("R/print.caic.R")
source("R/summary.caic.R")
mod
str(mod)
summary(mod)
source("R/summary.caic.R")
summary(mod)
source("R/summary.caic.R")
summary(mod)
mod
attributes(mod)
source("R/summary.caic.R")
x <- summary(mod)
coef(x)
x <- rnorm(10)
y <- rnorm(10)
lmMod <- lm(y~x)
summary(lmMod)
x <- summary(lmMod)
summary.lm
source("R/summary.caic.R")
source("R/print.caic.R")
summary(mod)
mod
source("R/print.caic.R")
mod
data(SmallTree)#
caicMod <- caic(othervar ~ weight, phy=diTree, data=SmallTreeDat, names.col=tip)#
print(caicMod)#
#
caicModSummary <- summary(caicMod)#
coef(caicModSummary)
lm()
rnorm()
rnorm
?match.args
?match.arg
