matrices <- .jcall(mesquiteRunner, "[I", "getMatrices", I0);
matrices <- .jcall(mesquiteRunner, "[I", "getMatrices", 0I);
asmatrices <- .jcall(mesquiteRunner, "[I", "getMatrices", as.integer(0));show(matrices);
matrices <- .jcall(mesquiteRunner, "[I", "getMatrices", as.integer(169));show(matrices);
global
help(global)
help(global variables)
global variables
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(moduleID, tre
e, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", moduleID, tree, categMatrix, characterIndex)	result}# testing ==========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaToMesquite(c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock, numChars=2)tree <- loadTreeToMesquite("(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxa)moduleID <- startMesquiteModule(className = "#BiSSELikelihood", script = "setReportMode lambda0; setParameters  ?  ?  =0 ?  ?  =2 ?  ?  =4;");result <- valueForTreeAndCharacter(moduleID, tree, catMatrix, 0);
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(moduleID, tre
e, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", moduleID, tree, categMatrix, characterIndex)	result}# testing ==========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaToMesquite(c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock, numChars=2)tree <- loadTreeToMesquite("(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxa)moduleID <- startMesquiteModule(className = "#BiSSELikelihood", script = "setReportMode lambda0; setParameters  ?  ?  =0 ?  ?  =2 ?  ?  =4;");result <- valueForTreeAndCharacter(moduleID, tree, catMatrix, 0);
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(moduleID, tre
e, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", moduleID, tree, categMatrix, characterIndex)	result}# testing ==========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaBlockToMesquite(c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock, numChars=2)tree <- loadTreeToMesquite("(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxa)moduleID <- startMesquiteModule(className = "#BiSSELikelihood", script = "setReportMode lambda0; setParameters  ?  ?  =0 ?  ?  =2 ?  ?  =4;");result <- valueForTreeAndCharacter(moduleID, tree, catMatrix, 0);
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(moduleID, mes
quiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", moduleID, mesquiteTree, categMatrix, characterIndex)	result}# testing ==========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaBlockToMesquite(nameArray = c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock=taxa, numChars=2)tree <- loadTreeToMesquite(newick = "(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxaBlock = taxa)bisse <- startMesquiteModule(className = "#BiSSELikelihood", script = "setReportMode lambda0; setParameters  ?  ?  =0 ?  ?  =2 ?  ?  =4;");result <- valueForTreeAndCharacter(moduleID = bisse, mesquiteTree = tree, categMatrix = catMatrix, characterIndex = 0);
result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree = tree, categMatrix = catMatrix, characterIndex = 0);
result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree = tree, categMatrix = catMatrix, characterIndex = as.integer(0));
result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree = tree, categMatrix = catMatrix, characterIndex = as.integer(1));
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(moduleID, mes
quiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}# testing ==========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaBlockToMesquite(nameArray = c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock=taxa, numChars=2)tree <- loadTreeToMesquite(newick = "(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxaBlock = taxa)bisse <- startMesquiteModule(className = "#BiSSELikelihood", script = "setReportMode lambda0; setParameters  ?  ?  =0 ?  ?  =2 ?  ?  =4;");result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree = tree, categMatrix = catMatrix, characterIndex =
2)
result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree = tree, categMatrix = catMatrix, characterIndex = 1)
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script = NULL){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(module
ID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}biSSELikelihood <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = NULL){	bisse <- startMesquiteModule(className = "#BiSSELikelihood", script);	result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree, categMatrix, characterIndex)	result}# testing ==========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaBlockToMesquite(nameArray = c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock=taxa, numChars=2)tree <- loadTreeToMesquite(newick = "(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;"
, taxaBlock = taxa)bisse <- biSSELikelihood(mesquiteTree = tree, categMatrix = catMatrix, characterIndex = 1)
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script = NULL){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(module
ID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}biSSELikelihood <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = ""){	bisse <- startMesquiteModule(className = "#BiSSELikelihood", script);	result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree, categMatrix, characterIndex)	result}# testing ==========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaBlockToMesquite(nameArray = c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock=taxa, numChars=2)tree <- loadTreeToMesquite(newick = "(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;",
taxaBlock = taxa)bisse <- biSSELikelihood(mesquiteTree = tree, categMatrix = catMatrix, characterIndex = 1)
library(rJava);.jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner");.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite");projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex");show(projectID);taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID);show(taxaBlocks);treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlocks[1]);show(treeVectors);tree <- .jcall(mesquiteRunner, "S", "getTree", treeVectors[1], as.integer(1));show(tree);
show(taxaBlocks);
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock = taxaBlocks[1]);show(treeVectors);
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlocks);show(treeVectors);
show(taxaBlocks)
show(taxaBlocks[1])
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlocks[1]);
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", as.Lmesquite/lib/Taxa;(taxaBlocks[1]));
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", as."Lmesquite/lib/Taxa;"(taxaBlocks[1]));
mt <- "Lmesquite/lib/Taxa;"treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", as.mt(taxaBlocks[1]));
library(rJava);.jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner");.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite");projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex");show(projectID);taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID);show(taxaBlocks);treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlocks[1]);show(treeVectors);tree <- .jcall(mesquiteRunner, "S", "getTree", treeVectors[1], as.integer(1));show(tree);
library(rJava);.jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner");.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite");projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex");show(projectID);taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID);show(taxaBlocks);treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlocks[1]);show(treeVectors);tree <- .jcall(mesquiteRunner, "S", "getTree", treeVectors[1], as.integer(1));show(tree);
help(.jcall)
taxablock <- taxaBlocks[1]
taxablock
taxaBlocks
taxablock <- taxaBlocks[1]treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlocks[1]);
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxablock);
attrs(taxaBlocks)
attr(taxaBlocks)
names(taxaBlocks)
class(taxaBlocks)
attributes(taxaBlocks)
projectOID
projectID
is..numeric(projectID)
is.numeric(projectID)
numTaxa <- .jcall(taxablock, "I", "getNumTaxa");
numTaxa <- .jcall(taxaBlocks[1], "I", "getNumTaxa");
taxablock <- jcast(taxaBlocks[1], new.class = "Lmesquite/lib/Taxa;")
taxablock <- .jcast(taxaBlocks[1], new.class = "Lmesquite/lib/Taxa;")
tb <- .jcastToArray(taxaBlocks, signature="[Lmesquite/lib/Taxa;", class="", quiet=FALSE)
tb <- .jcastToArray(taxaBlocks)
library(rJava);.jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner");.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite");projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex");show(projectID);taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID);show(taxaBlocks);numTaxa <- .jcall(taxaBlocks[1], "I", "getNumTaxa");
tb <- taxaBlocks[[1]]
tb
numTaxa <- .jcall(tb, "I", "getNumTaxa");
numTaxa
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", tb);show(treeVectors);tree <- .jcall(mesquiteRunner, "S", "getTree", treeVectors[[1]], as.integer(1));
treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", tb);
library(rJava);.jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner");.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite");projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex");show(projectID);taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID);show(taxaBlocks);tb <- taxaBlocks[[1]]treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", tb);show(treeVectors);tv <- treeVectors[[1]];tree <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1));
tree
> tree <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1));
tree <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1));
tree
library(rJava);.jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner");.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite");projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex");show(projectID);taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID);show(taxaBlocks);tb <- taxaBlocks[[1]]treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", tb);show(treeVectors);tv <- treeVectors[[1]];tree <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1));
tree <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1));
tree
library(rJava);.jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner");.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite");projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex");show(projectID);taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID);show(taxaBlocks);tb <- taxaBlocks[[1]]treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", tb);show(treeVectors);tv <- treeVectors[[1]];tree <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1));
tree
mtree <- eval(tree)
mtree
help(eval)
eval(paste("mtree <- ",tree,sep=""))
eval(paste("mtree <- ",tree,sep=""));
mtree
class(mtree)
class(tree)
s <- "class(tree)"
eval(s)
source("class(tree)")
help(source)
parse(text="class(tree)")
eval(parse(text="class(tree)"))
eval(parse(text="tree))
;
)
;
)))
q
)));
''
";
eval(parse(text=tree))
library(rJava).jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"))mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner").jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")show(projectID)taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)show(taxaBlocks)tb <- taxaBlocks[[1]]treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", tb)show(treeVectors)tv <- treeVectors[[1]]treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1))tree <- parse(text=treeString)tree
class(tree)
parse(text = "tree <- " + treeString)
parse(text = paste("tree <- ", treeString, sep=""))tree
eval(parse(text = paste("tree <- ", treeString, sep="")))
tree
library(rJava).jinit(classpath = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"))mesquiteRunner <- .jnew("mesquite/rmLink/lib/MesquiteRunner").jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")projectID <- .jcall(mesquiteRunner, "I", "readFile", "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")show(projectID)taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)show(taxaBlocks)tb <- taxaBlocks[[1]]treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", tb)show(treeVectors)tv <- treeVectors[[1]]treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(1))eval(parse(text = paste("tree <- ", treeString, sep="")))tree
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ", treeString, sep="")))	tree}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_Works
paceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
num <- getNumberOfTrees(tv)
getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}
num <- getNumberOfTrees(tv)
num
startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}getColumnNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", mesqContMatrix)	eval(parse(text = paste("col <- ", str, sep="")))	col}getRowNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", mesqContMatrix)	eval(parse(text = paste("rows <- ", str, sep="")))	rows}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTreecontMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)colnames(mat) <- getColumnNamesCommand(mesqContMatrix = contMesq)rownames(mat) <- getRowNamesCommand(mesqContMatrix = contMesq)
colnames(mat) <- getColumnNames(mesqContMatrix = contMesq)
	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/cont/lib/ContinuousData"))	eval(parse(text = paste("rows <- ", str, sep="")))	rows
startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}getColumnNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", mesqContMatrix)	eval(parse(text = paste("col <- ", str, sep="")))	col}getRowNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/cont/lib/ContinuousData"))	eval(parse(text = paste("rows <- ", str, sep="")))	rows}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_Workspac
eHEADLESS/Headless/Mesquite_Folder"));
projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)
rownames(mat) <- getRowNames(mesqContMatrix = contMesq)
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}getColumnNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", mesqContMatrix)	eval(parse(text = paste("col <- ", str, sep="")))	col}getRowNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("rows <- ", str, sep="")))	rows}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_Wor
kspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)rownames(mat) <- getRowNames(mesqContMatrix = contMesq)
startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}getColumnNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("col <- ", str, sep="")))	col}getRowNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("rows <- ", str, sep="")))	rows}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHE
ADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)rownames(mat) <- getRowNames(mesqContMatrix = contMesq)colnames(mat) <- getColumnNames(mesqContMatrix = contMesq)
nn <- getRowNames(mesqContMatrix = contMesq)
nn
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(rMatrix <- parse(text = str)))}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(rMatrix <- parse(text = str)))}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite
_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("rMatrix <- ", str, sep="")))	rMatrix}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("rMatrix <- ", str, sep="")))	rMatrix}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Use
rs/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)setRowNames(mesqContMatrix = contMesq, rMatrix = mat)setColumnNames(mesqContMatrix = contMesq, rMatrix = mat)
mat
show(mat)
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("colnames(rMatrix) <- ", str, sep="")))	rMatrix}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("rownames(rMatrix) <- ", str, sep="")))	rMatrix}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mes
quite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)setRowNames(mesqContMatrix = contMesq, rMatrix = mat)setColumnNames(mesqContMatrix = contMesq, rMatrix = mat)
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	rn <- eval(parse(text = str))	//eval(parse(text = paste("rownames(rMatrix) <- ", str, sep="")))	colnames(rMatrix) <- rn}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	rn <- eval(parse(text = str))	//eval(parse(text = paste("rownames(rMatrix) <- ", str, sep="")))	rownames(rMatrix) <- rn}# testing =================================================
===========startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getColumnNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("nn <- ", str, sep="")))	colnames(rMatrix) <- nn}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "S", "getRowNamesCommand", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	eval(parse(text = paste("nn <- ", str, sep="")))	rownames(rMatrix) <- nn}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/M
esquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)setRowNames(mesqContMatrix = contMesq, rMatrix = mat)setColumnNames(mesqContMatrix = contMesq, rMatrix = mat)
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "[S;", "getColumnNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	colnames(rMatrix) <- str}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "[S;", "getRowNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))		rownames(rMatrix) <- str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mes
quite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)setRowNames(mesqContMatrix = contMesq, rMatrix = mat)setColumnNames(mesqContMatrix = contMesq, rMatrix = mat)
startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "[S;", "getColumnNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	colnames(rMatrix) <- str}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "[java/lib/String;", "getRowNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))		rownames(rMatrix) <- str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/User
s/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
.jcall(mesquiteRunner, "[S;", "aString")
.jcall(mesquiteRunner, "[S", "aString")
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}setColumnNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "[S", "getColumnNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	colnames(rMatrix) <- str}setRowNames <- function(mesqContMatrix, rMatrix){	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))		rownames(rMatrix) <- str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesqu
ite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)setRowNames(mesqContMatrix = contMesq, rMatrix = mat)setColumnNames(mesqContMatrix = contMesq, rMatrix = mat)
	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(contMesq, new.class = "mesquite/lib/characters/CharacterData"))
rowNames(contMesq) <- str
rownames(contMesq) <- str
contMesq
rownames(mat) <- str
mat
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}getNumberOfCharaters <- function(mesqMatrix){	num <- .jcall(taxaBlock, "I", "getNumChars", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	num}getColumnNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "[S", "getColumnNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}getRowNames <- function(mesqContMatrix){	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Pro
ject/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)rn <- getRowNames(mesqContMatrix = contMesq)dim(mat) <- c(getNumberOfTaxa(tb), getNumberOfCharacters(contMesq))rownames(mat) <- rncn <- getColumnNames(mesqContMatrix = contMesq)colnames(mat) <- cn
dim(mat) <- c(getNumberOfTaxa(tb), getNumberOfCharacters(mesqMatrix = contMesq))rownames(mat) <- rncn <- getColumnNames(mesqContMatrix = contMesq)colnames(mat) <- cn
getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(taxaBlock, "I", "getNumChars", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	num}
dim(mat) <- c(getNumberOfTaxa(tb), getNumberOfCharacters(mesqMatrix = contMesq))rownames(mat) <- rncn <- getColumnNames(mesqContMatrix = contMesq)colnames(mat) <- cn
dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = contMesq))rownames(mat) <- rncn <- getColumnNames(mesqContMatrix = contMesq)colnames(mat) <- cn
dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = contMesq))
tb
getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(mesqMatrix, "I", "getNumChars", .jcast(mesqContMatrix, new.class = "mesquite/lib/characters/CharacterData"))	num}
dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = contMesq))rownames(mat) <- rncn <- getColumnNames(mesqContMatrix = contMesq)colnames(mat) <- cn
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getContinuousMatrix <- function(mesqContMatrix){	matrices <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	matrices}getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(mesqMatrix, "I", "getNumChars", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/CharacterData"))	num}getColumnNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getColumnNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}getRowNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Fold
er', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- getContinuousMatrix(mesqContMatrix = contMesq)rn <- getRowNames(mesqMatrix = contMesq)dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = contMesq))rownames(mat) <- rncn <- getColumnNames(mesqMatrix = contMesq)colnames(mat) <- cn
getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(mesqMatrix, "I", "getNumChars")	num}
rn <- getRowNames(mesqMatrix = contMesq)dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = contMesq))rownames(mat) <- rncn <- getColumnNames(mesqMatrix = contMesq)colnames(mat) <- cn
mat
getContinuousMatrix <- function(mesqContMatrix){	mat <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	rn <- getRowNames(mesqMatrix = contMesq)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = contMesq))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = contMesq)	colnames(mat) <- cn	mat}
mat <- getContinuousMatrix(mesqContMatrix = contMesq)mat
convertContinuousMatrix <- function(mesqContMatrix){	mat <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	rn <- getRowNames(mesqMatrix = mesqContMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqContMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqContMatrix)	colnames(mat) <- cn	mat}
mat <- convertContinuousMatrix(mesqContMatrix = contMesq)mat
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getCategoricalMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/CategoricalData;", "getCategoricalMatrices", taxaBlock)	matrices}getDNAMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/DNAData;", "getDNAMatrices", taxaBlock)	matrices}convertContinuousMatrix <- function(mesqContMatrix){	mat <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	rn <- getRowNames(mesqMatrix = mesqContMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqContMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqContMatrix)	colnames(mat) <- cn	mat}convertCategoricalMatrix <- function(mesqCategMatrix){	mat <- .jcall(mesquiteRunner, "[I", "getMatrix", mesqCategMatrix)	rn <- ge
tRowNames(mesqMatrix = mesqCategMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqCategMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqCategMatrix)	colnames(mat) <- cn	mat}convertDNAMatrix <- function(mesqDNAMatrix){	mat <- .jcall(mesquiteRunner, "[I", "getMatrix", mesqDNAMatrix)	rn <- getRowNames(mesqMatrix = mesqDNAMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqDNAMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqDNAMatrix)	colnames(mat) <- cn	mat}getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(mesqMatrix, "I", "getNumChars")	num}getColumnNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getColumnNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}getRowNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/Ch
aracterData"))	str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- convertContinuousMatrix(mesqContMatrix = contMesq)matcatMatrices <- getCategoricalMatrices(taxaBlock = tb)catMesq <- catMatrices[[1]]cmat <- convertContinuousMatrix(mesqCategMatrix = catMesq)cmat
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getCategoricalMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/CategoricalData;", "getCategoricalMatrices", taxaBlock)	matrices}getDNAMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/DNAData;", "getDNAMatrices", taxaBlock)	matrices}convertContinuousMatrix <- function(mesqContMatrix){	mat <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	rn <- getRowNames(mesqMatrix = mesqContMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqContMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqContMatrix)	colnames(mat) <- cn	mat}convertCategoricalMatrix <- function(mesqCategMatrix){	mat <- .jcall(mesquiteRunner, "[I", "getMatrix", mesqCategMatrix)	rn <- ge
tRowNames(mesqMatrix = mesqCategMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqCategMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqCategMatrix)	colnames(mat) <- cn	mat}convertDNAMatrix <- function(mesqDNAMatrix){	mat <- .jcall(mesquiteRunner, "[I", "getMatrix", mesqDNAMatrix)	rn <- getRowNames(mesqMatrix = mesqDNAMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqDNAMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqDNAMatrix)	colnames(mat) <- cn	mat}getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(mesqMatrix, "I", "getNumChars")	num}getColumnNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getColumnNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}getRowNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/Ch
aracterData"))	str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
catMatrices <- getCategoricalMatrices(taxaBlock = tb)catMesq <- catMatrices[[1]]cmat <- convertContinuousMatrix(mesqCategMatrix = catMesq)cmat
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getCategoricalMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/categ/lib/CategoricalData;", "getCategoricalMatrices", taxaBlock)	matrices}getDNAMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/categ/lib/DNAData;", "getDNAMatrices", taxaBlock)	matrices}convertContinuousMatrix <- function(mesqContMatrix){	mat <- .jcall(mesquiteRunner, "[D", "getMatrix", mesqContMatrix)	rn <- getRowNames(mesqMatrix = mesqContMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqContMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqContMatrix)	colnames(mat) <- cn	mat}convertCategoricalMatrix <- function(mesqCategMatrix){	mat <- .jcall(mesquiteRunner, "[I", "getMatrix", mesqCategMatrix)	rn <-
getRowNames(mesqMatrix = mesqCategMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqCategMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqCategMatrix)	colnames(mat) <- cn	mat}convertDNAMatrix <- function(mesqDNAMatrix){	mat <- .jcall(mesquiteRunner, "[I", "getMatrix", mesqDNAMatrix)	rn <- getRowNames(mesqMatrix = mesqDNAMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqDNAMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqDNAMatrix)	colnames(mat) <- cn	mat}getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(mesqMatrix, "I", "getNumChars")	num}getColumnNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getColumnNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}getRowNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/
CharacterData"))	str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- convertContinuousMatrix(mesqContMatrix = contMesq)matcatMatrices <- getCategoricalMatrices(taxaBlock = tb)catMesq <- catMatrices[[1]]cmat <- convertCategoricalMatrix(mesqCategMatrix = catMesq)cmat
catMatrices <- getDNAMatrices(taxaBlock = tb)catMesq <- catMatrices[[1]]cmat <- convertDNAMatrix(mesqDNAMatrix = catMesq)cmat
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}mesquiteReadFile <- function(path){	projectID <- .jcall(mesquiteRunner, "I", "readFile", path)	projectID}getTaxaBlocks <- function(projectID){	taxaBlocks <- .jcall(mesquiteRunner, "[Lmesquite/lib/Taxa;", "getTaxaBlocks", projectID)	taxaBlocks	}getNumberOfTaxa <- function(taxaBlock){	num <- .jcall(taxaBlock, "I", "getNumTaxa")	num}getTaxonNames <- function(taxaBlock){	}getTreeVectors <- function(taxaBlock){	treeVectors <- .jcall(mesquiteRunner, "[Lmesquite/lib/TreeVector;", "getTreeVectors", taxaBlock)	treeVectors}getNumberOfTrees <- function(treeVector){	num <- .jcall(treeVector, "I", "getNumberOfTrees")	num}getPhyloTreeFromVector <- function(treeVector, treeIndex){	treeString <- .jcall(mesquiteRunner, "S", "getTree", tv, as.integer(treeIndex))	eval(parse(text = paste("tree <- ",
 treeString, sep="")))	tree}getContinuousMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/cont/lib/ContinuousData;", "getContinuousMatrices", taxaBlock)	matrices}getCategoricalMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/categ/lib/CategoricalData;", "getCategoricalMatrices", taxaBlock)	matrices}getDNAMatrices <- function(taxaBlock){	matrices <- .jcall(mesquiteRunner, "[Lmesquite/categ/lib/DNAData;", "getDNAMatrices", taxaBlock)	matrices}convertContinuousMatrix <- function(mesqContMatrix){	mat <- .jcall(mesquiteRunner, "[D", "convertMatrix", mesqContMatrix)	rn <- getRowNames(mesqMatrix = mesqContMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqContMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqContMatrix)	colnames(mat) <- cn	mat}convertCategoricalMatrix <- function(mesqCategMatrix){	mat <- .jcall(mesquiteRunner, "[I", "convertMatrix", mesqCategMatrix)
	rn <- getRowNames(mesqMatrix = mesqCategMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqCategMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqCategMatrix)	colnames(mat) <- cn	mat}convertDNAMatrix <- function(mesqDNAMatrix){	mat <- .jcall(mesquiteRunner, "[I", "convertMatrix", mesqDNAMatrix)	rn <- getRowNames(mesqMatrix = mesqDNAMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqDNAMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqDNAMatrix)	colnames(mat) <- cn	mat}getNumberOfCharacters <- function(mesqMatrix){	num <- .jcall(mesqMatrix, "I", "getNumChars")	num}getColumnNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getColumnNames", .jcast(mesqMatrix, new.class = "mesquite/lib/characters/CharacterData"))	str}getRowNames <- function(mesqMatrix){	str <- .jcall(mesquiteRunner, "[S", "getRowNames", .jcast(mesqMatrix, new.class = "mesquite/lib
/characters/CharacterData"))	str}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- convertContinuousMatrix(mesqContMatrix = contMesq)matcatMatrices <- getDNAMatrices(taxaBlock = tb)catMesq <- catMatrices[[1]]cmat <- convertDNAMatrix(mesqDNAMatrix = catMesq)cmat
convertDNAMatrix <- function(mesqDNAMatrix){	mat <- .jcall(mesquiteRunner, "[S", "convertMatrix", mesqDNAMatrix)	rn <- getRowNames(mesqMatrix = mesqDNAMatrix)	dim(mat) <- c(getNumberOfTaxa(taxaBlock = tb), getNumberOfCharacters(mesqMatrix = mesqDNAMatrix))	rownames(mat) <- rn	cn <- getColumnNames(mesqMatrix = mesqDNAMatrix)	colnames(mat) <- cn	mat}
catMatrices <- getDNAMatrices(taxaBlock = tb)catMesq <- catMatrices[[1]]cmat <- convertDNAMatrix(mesqDNAMatrix = catMesq)cmat
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, numChars, rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script = NULL){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  function(module
ID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}biSSELikelihood <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = ""){	bisse <- startMesquiteModule(className = "#BiSSELikelihood", script);	result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree, categMatrix, characterIndex)	result}ancestralStatesForTreeAndCharacter <-  function(moduleID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "Lmesquite/lib/characters/CharacterHistory;", "ancestralStatesCategorical", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}ancestralStates <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = ""){	anc <- startMesquiteModule(className = "#MargProbAncStates", script);	result <- ancestralStatesForTreeAndCharacter(moduleID = anc, mesquiteTree,
categMatrix, characterIndex)	result}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
taxa <- loadTaxaBlockToMesquite(nameArray = c("a1", "a2", "a3", "a4"))matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock=taxa, numChars=2)tree <- loadTreeToMesquite(newick = "(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxaBlock = taxa)history <- ancestralStatesForTreeAndCharacter(moduleID =
loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, as.integer(numChars), rMatrix)	 catMatrix}
""
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, as.integer(numChars), rMatrix)	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script = NULL){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndCharacter <-  fun
ction(moduleID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}biSSELikelihood <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = ""){	bisse <- startMesquiteModule(className = "#BiSSELikelihood", script);	result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree, categMatrix, characterIndex)	result}ancestralStatesForTreeAndCharacter <-  function(moduleID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "Lmesquite/lib/characters/CharacterHistory;", "ancestralStatesCategorical", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}ancestralStates <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = ""){	anc <- startMesquiteModule(className = "#MargProbAncStates", script);	result <- ancestralStatesForTreeAndCharacter(moduleID = anc, me
squiteTree, categMatrix, characterIndex)	result}# testing ============================================================startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaBlockToMesquite(nameArray = c("a1", "a2", "a3", "a4"))
matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock=taxa, numChars=2)tree <- loadTreeToMesquite(newick = "(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxaBlock = taxa)history <- ancestralStatesForTreeAndCharacter(moduleID =
startMesquite <- function(cp){	library(rJava)	.jinit(classpath = cp)	mesquiteRunner <<- .jnew("mesquite/rmLink/lib/MesquiteRunner")	.jcall(mesquiteRunner, "Lmesquite/Mesquite;", "startMesquite")}loadTaxaBlockToMesquite <- function(blockName = "TaxaFromR", nameArray){	taxa <- .jcall(mesquiteRunner, "Lmesquite/lib/Taxa;", "loadTaxaBlock", blockName, nameArray)	taxa}loadCategoricalMatrixToMesquite <- function(rMatrix, matrixName = "MatrixFromR", taxaBlock, numChars){	catMatrix <- .jcall(mesquiteRunner, "Lmesquite/categ/lib/CategoricalData;", "loadCategoricalMatrix", taxaBlock, matrixName, as.integer(numChars), as.integer(rMatrix))	 catMatrix}loadTreeToMesquite <- function(newick, treeName = "TreeFromR", taxaBlock){	tree <- .jcall(mesquiteRunner, "Lmesquite/lib/MesquiteTree;", "loadTree", taxaBlock, treeName, newick)	tree}startMesquiteModule <- function(className, script = NULL){	moduleID <- .jcall(mesquiteRunner, "I", "startModule", className, script)	moduleID}functionForTreeAndChara
cter <-  function(moduleID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "D", "numberForTreeAndCharacter", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}biSSELikelihood <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = ""){	bisse <- startMesquiteModule(className = "#BiSSELikelihood", script);	result <- functionForTreeAndCharacter(moduleID = bisse, mesquiteTree, categMatrix, characterIndex)	result}ancestralStatesForTreeAndCharacter <-  function(moduleID, mesquiteTree, categMatrix, characterIndex = 1){	result <- .jcall(mesquiteRunner, "Lmesquite/lib/characters/CharacterHistory;", "ancestralStatesCategorical", as.integer(moduleID), mesquiteTree, categMatrix, as.integer(characterIndex))	result}ancestralStates <-  function(mesquiteTree, categMatrix, characterIndex = 1, script = ""){	anc <- startMesquiteModule(className = "#MargProbAncStates", script);	result <- ancestralStatesForTreeAndCharacter(module
ID = anc, mesquiteTree, categMatrix, characterIndex)	result}
startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));taxa <- loadTaxaBlockToMesquite(nameArray = c("a1", "a2", "a3", "a4"))
matrix <- c(0,1,1,0,0,0,0,0)catMatrix <- loadCategoricalMatrixToMesquite(rMatrix = matrix, taxaBlock=taxa, numChars=2)tree <- loadTreeToMesquite(newick = "(((a1:1.2,a3:3.4):1.5,a4:2.8):4.2,a2):0.6;", taxaBlock = taxa)history <- ancestralStatesForTreeAndCharacter(moduleID =
""
history <- ancestralStates(mesquiteTree = tree, categMatrix = catMatrix, characterIndex = 1)
setwd("/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/PhyloConductor/Rpkgs/Rmesquite/R")require(rJava).jpackage("Rmesquite")source("mesquite.R")startMesquite(cp = c('/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Mesquite Project/Mesquite_Folder', "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/RMLink/Mesquite_Folder", "/Users/wmaddisn/Mesquite_WorkspaceHEADLESS/Headless/Mesquite_Folder"));
projID <- mesquiteReadFile(path = "/Users/wmaddisn/Phylogeny & Theory/!RHackathon07/!APEmultipleTrees49LBR.nex")
taxaBlocks <- getTaxaBlocks(projectID = projID)tb <- taxaBlocks[[1]]treeVectors <- getTreeVectors(taxaBlock = tb)
tv <- treeVectors[[1]]num <- getNumberOfTrees(tv)phyloTree <- getPhyloTreeFromVector(tv, 1)phyloTree
contMatrices <- getContinuousMatrices(taxaBlock = tb)contMesq <- contMatrices[[1]]mat <- convertContinuousMatrix(mesqContMatrix = contMesq)mat
catMatrices <- getDNAMatrices(taxaBlock = tb)catMesq <- catMatrices[[1]]cmat <- convertDNAMatrix(mesqDNAMatrix = catMesq)cmat
